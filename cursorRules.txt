building a Plain Text to JSON Question Converter App. This outlines:

✅ What you are building

🧰 Tech stack to use

🧭 Features

👣 Step-by-step plan

🚀 Deployment suggestions

📝 Project Requirements Document
📌 Project Title:
Plain Text to JSON Converter for Exam Questions

🎯 Objective
Build a small web application that allows users to:

Paste a block of plain text containing MCQ questions

Parse and convert it into structured JSON format automatically

View the JSON output

Optionally download/export/save the result

📦 Output Format (Target JSON)
json
Copy code
{
  "id": 11,
  "question": "A company wants to assess its operational readiness...",
  "type": "single",
  "options": [
    "AWS Business Support",
    "AWS Basic Support",
    "AWS Developer Support",
    "AWS Enterprise Support"
  ],
  "answer": "AWS Enterprise Support"
}
🧰 Tech Stack
Layer	Technology	Purpose
Frontend	React.js	Build UI (input form, output view)
Styling	Tailwind CSS / CSS	UI styling and responsiveness
Backend (optional)	Node.js + Express	For saving/converting files or history
Export	FileSaver.js or Blob	Export/download JSON output
Hosting	Vercel / Netlify	Deploy the web app

🧩 Core Features
Paste Plain Text Block

Convert to JSON

Show JSON in Prettified Format

Copy / Export JSON

(Optional) Edit parsed data before saving

(Optional) Batch file upload

🧭 Approach
🧠 Parsing Logic Design
Build a JavaScript function that:

Extracts the question ID (like Q11. → 11)

Combines lines to form the full question

Extracts options (A., B., C., D.)

Maps Answer: D to correct option text

Outputs a final JSON object

✅ Keep it generic so it can handle multi-line questions and options.

👣 Step-by-Step Plan
🔹 Phase 1: Setup
Create React project (e.g., with Vite or Create React App)

bash
Copy code
npm create vite@latest json-converter-app --template react
cd json-converter-app
npm install
Install Tailwind CSS (Optional)

bash
Copy code
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
🔹 Phase 2: Implement UI
Textarea input for the raw plain text

"Convert" button

JSON preview box (formatted output)

"Copy" and "Download" buttons

🔹 Phase 3: Write Parsing Logic
Use the parseQuestion(text) function (already shared earlier) to handle:

ID extraction

Multi-line question + options

Mapping Answer: <Letter> → option text

🔹 Phase 4: Enhance Functionality (Optional)
Add support for multiple questions at once

Allow batch input and generate JSON array

Export JSON as a downloadable file (.json)

Add toast/snackbar for actions

🔹 Phase 5: Deployment
Build app

bash
Copy code
npm run build
Deploy using:

Vercel

Netlify

GitHub Pages

✅ Stretch Goals (Future Scope)
Add login system to save question sets

Add question editor

Add support for CSV → JSON

Allow uploading DOCX or TXT files

Host on custom domain

📂 Folder Structure
css
Copy code
/src
 ├── components/
 │     ├── TextInput.jsx
 │     ├── JsonOutput.jsx
 ├── utils/
 │     ├── parser.js       ← contains core parsing logic
 ├── App.jsx
 └── main.jsx
✅ Deliverables
React App (fully responsive)

Function that converts question blocks to JSON

Button to export JSON

Clean UI + Tailwind (optional)

Hosted live link

